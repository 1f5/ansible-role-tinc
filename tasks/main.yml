%YAML 1.1  # roles/tinc/tasks/main.yml  -*- mode: yaml -*-

#    Copyright (C) 2016  Etienne Noreau-Hebert <e@zncb.io>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


---

# set extra variables for often used values
# it's a bit silly that we can't refer to new variables in subsequent vars in a set_fact statement...
- set_fact:
    net_conf_dir: "{{ tinc_conf_dir }}/{{ netname }}"
    net_conf: "{{ tinc_conf_dir }}/{{ netname }}/tinc.conf"
    host_conf_dir: "{{ tinc_conf_dir }}/{{ netname }}/hosts"
    host_conf: "{{ tinc_conf_dir }}/{{ netname }}/hosts/{{ ansible_hostname }}"
    rsa_pubkey: "{{ tinc_conf_dir }}/{{ netname }}/rsa_key.pub"
    rsa_privkey: "{{ tinc_conf_dir }}/{{ netname }}/rsa_key.priv"
    net_host_cache: "{{ host_cache }}/{{ netname }}"
    cached_conf: "{{ host_cache }}/{{ netname }}/{{ ansible_hostname }}"

# install tinc and generate configurations for network

- block:
  - name: install tinc
    apt: >
      name=tinc
      state=present
      update_cache=yes

  - name: create network/hosts config directory
    file: >
      path="{{ host_conf_dir }}"
      recurse=yes
      state=directory

  - name: create network config
    vars:
    - netgroup_b: "{{ netgroup | default(netname) }}"
    template: >
      src=tinc.conf.j2
      dest="{{ net_conf }}"

  - name: add network to nets.boot
    lineinfile: >
      dest="{{ tinc_conf_dir }}/nets.boot"
      create=yes
      state=present
      line="{{ netname }}"

  - name: create tinc-up file
    template: >
      src=tinc-up.j2
      dest="{{ net_conf_dir }}/tinc-up"
      mode=0755

  - name: create tinc-down file
    template: >
      src=tinc-down.j2
      dest="{{ net_conf_dir }}/tinc-down"
      mode=0755

  - name: create host config 
    template: >
      src=host.j2
      dest="{{ host_conf }}"
  
  - name: check for cached RSA public key
    stat: path="{{ rsa_pubkey }}"
    register: rsa_pubkey_stat

  - name: re-inject host public key in config
    when: (rsa_pubkey_stat.stat.exists == True) and not regen_keys 
    shell: cat "{{ rsa_pubkey }}" >> "{{ host_conf }}"

  - block:
    - name: create tinc key pair
      shell: tincd -n {{ netname }} -K{{ keysize }}
      args:
        creates: "{{ rsa_privkey }}"

    - name: backup tinc public key
      shell: sed -n -e '/BEGIN RSA PUBLIC KEY/,$p' "{{ host_conf }}" > "{{ rsa_pubkey }}"
      args:
        creates: "{{ rsa_pubkey }}"
   
    when: regen_keys or (rsa_pubkey_stat.stat.exists == False)

  when: mode == 'default'

# clearing and refreshing local host config cache

- block:
  - name: remove local host config cache
    delegate_to: 127.0.0.1
    run_once: yes
    ignore_errors: yes
    file: >
      path="{{ net_host_cache }}"
      state=absent
 
  - block:
    - name: create local host config cache
      delegate_to: 127.0.0.1
      file: >
        path="{{ net_host_cache }}"
        state=directory

    - name: fetch host config file
      fetch: >
        src="{{ host_conf }}"
        dest="{{ cached_conf }}"
        flat=yes
        fail_on_missing=yes

    when: (mode != 'uninstall') and (mode != 'remove')

  become: no
  when: mode != 'push'


# pushing cached host configs to hosts

- name: push host config files
  when: (mode != 'uninstall') and (mode != 'remove')

  synchronize:
    src="{{ net_host_cache }}/"
    dest="{{ host_conf_dir }}"
    copy_links=yes
    delete=yes
    recursive=yes
    mode=push
  notify: restart tinc

# removing a network or uninstalling 

- block:
  - name: remove network directory 
    file: >
      path="{{ net_conf_dir }}"
      state=absent

  - name: remove network from nets.boot 
    lineinfile: >
      dest="{{ tinc_conf_dir }}/nets.boot"
      state=absent
      line="{{ netname }}"

  - name: uninstall tinc
    apt: >
      name=tinc
      state=absent
    when: mode == 'uninstall'

  when: (mode == 'uninstall') or (mode == 'remove')

# convenience tasks for service state

- name: start tinc service
  service: >
    name=tinc
    enabled=yes
    state=started
  when: mode == 'start'

- name: restart tinc service
  service: >
    name=tinc
    enabled=yes
    state=restarted
  when: mode == 'restart'

- name: stop tinc service
  service: >
    name=tinc
    state=stopped
  when: mode == "stop"

- name: disable tinc service
  service: >
    name=tinc
    enabled=no
    state=stopped
  when: mode == "disable"
 

